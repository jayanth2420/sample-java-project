pipeline {
    agent any
    
    parameters {
        string(name: 'MAVEN_COMMAND', defaultValue: 'clean package', description: 'Maven command to run')
        string(name: 'DEPLOY_ENVIRONMENTS', defaultValue: 'QA,Production', description: 'Comma-separated list of environments to deploy (e.g., QA,Production)')
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout source code from Git repository
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'f0f7fd4c-11e6-4f16-8563-4f503e476d39', url: 'https://github.com/jayanth2420/sample-java-project.git']])
            }
        }
        stage('Build') {
            steps {
                // Build your project using the specified Maven command
                bat "mvn ${params.MAVEN_COMMAND}"
            }
        }
        stage('Test') {
            steps {
                // Run tests
                bat "mvn test"
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // Split the environments by comma and iterate over them
                    def environments = params.DEPLOY_ENVIRONMENTS.split(',')
                    for (env in environments) {
                        env = env.trim() // Trim any extra whitespace
                        if (env == 'QA') {
                            echo "Deploying to QA environment"
                            //sh 'kubectl apply -f qa-deployment.yaml'
                        } else if (env == 'Production') {
                            echo "Deploying to Production environment"
                            //sh 'kubectl apply -f prod-deployment.yaml'
                        } else {
                            echo "Unknown environment: ${env}"
                        }
                    }
                }
            }
            post {
                success {
                    echo "Deployment to selected environments succeeded!"
                }
                failure {
                    echo "Deployment to selected environments failed!"
                }
            }
        }
    }
}
